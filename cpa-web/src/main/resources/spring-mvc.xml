<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

    <!--(如果当前路径是/ ) 默认访问跳转(亦或是重定向redirect)到登录页面(即定义无需Controller的url<->view直接映射),还有一种用法是
     <mvc:view-controller path="/" view-name=admin/index"/> 如果当前路径是/ 则交给相应的视图解析器直接解析为视图 -->
    <mvc:view-controller path="/" view-name="forward:/index.html"/>

    <!-- 1：注解的方式，引入组件的自动扫描，在类和方法上可以添加对注解的支持 -->
    <!-- 这是SpringMVC的配置文件，这里的扫描仅仅针对@Controller和@Handlermapping来说的，而Spring配置
        文件中的扫描是针对@Service @Repository，@Components来说的，Spring是桥梁, 而SpringMVC更专注了控制和转发，所以虽然两者都要进行注解扫描，但是所扫描的
        内容是不一样的 -->
    <!--当配置为base-package="cn.kanyun"不仅仅扫描到带有@Controller注解的Bean，还会默认扫描到带有@Service/@Repository注解的Bean，可能造成事务不起作用等问题-->
    <!--此时需要加上use-default-filters=“false”禁用掉默认的行为,配置为base-package="cn.kanyun.cpa.controller"则不会 springmvc容器中只扫描Controller注解-->
    <!--如果spring配置了context:property-placeholder加载配置文件,则一定不能缺少下面的use-default-filters="false"-->
    <context:component-scan base-package="cn.kanyun.cpa.controller" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!-- 通知spring使用cglib而不是jdk的来生成代理方法，这样 AOP可以拦截到Controller -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- handlermapping 支持@RequestMapping,@ReponseBody,@Exceptionhandler 这是最简单的支持注解的方式,如果需要全局定义一些返回的值使用下面配置-->
    <!--<mvc:annotation-driven/>-->
    <!--配置-如果返回对象中有值为Null则返回JSON时不将其返回(即Key也消失了),以节省网络传输-->
    <!--有两种方法设置不返回null值属性.一种是如下配置,一种则是在被返回对象的类上添加注解@JsonInclude(Include.NON_NULL)即可-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="mappingJacksonHttpMessageConverter"
                  class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
                <property name="objectMapper">
                    <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                        <!-- 处理responseBody 里面日期类型 -->
                        <property name="dateFormat">
                            <bean class="java.text.SimpleDateFormat">
                                <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"/>
                            </bean>
                        </property>
                        <property name="serializationInclusion">
                            <!-- 这种是将字段为null的清理掉不在结果Json中显示出来,其余的还有以下几种配置: ALWAYS, NON_NULL, NON_DEFAULT, NON_EMPTY-->
                            <value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>
                        </property>
                    </bean>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 对静态资源文件的访问  方案一 （二选一） -->
    <!--SpringMVC3.0之后推荐使用-->
    <!-- 据说是如果静态资源放在WEB-INF下，使用该命令可以加载，但是为了安全静态资源应该加载webroot下 -->
    <!--使用该配置的前提是web.xml里的DispatcherServlet设置的是拦截所有请求（<url-pattern>/</url-pattern>）-->
    <!--如果只是拦截.do请求(<url-pattern>*.do</url-pattern>)，则不必设置该配置-->
    <mvc:default-servlet-handler/>

    <!-- 对静态资源文件的访问  方案二 （二选一）-->
    <!--加<mvc:resources...前，要加上<mvc:annotation-driven/>，否则servlet控件器会解析失败-->
    <!-- 由于web.xml中设置是：由SpringMVC拦截所有请求,于是在读取静态资源文件的时候就会受到影响(说白了就是读不到) -->
    <!-- 经过下面的配置，该标签的作用就是：所有页面中引用"/js/**"的资源，都会从"/resources/js/"里面进行查找 -->
    <!--<mvc:resources mapping="/resources/**" location="/resources/" />-->

    <!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
    <!-- 配置ViewResolver视图解析器 -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 这里的配置是自动给后面servlet的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
        <property name="prefix" value="/"/>
        <property name="suffix" value=".html"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <!--order表示优先级,O表示优先级最高,可以配置多个视图解析器(视图解析器有多种如：FreeMarkerViewResolver,当配置多个视图解析器时
        优先级高的解析器如果解析的到，就不会再往下解析，如果解析不到,就给优先级低的解析器,但是对于解析器InternalResourceViewResolver来说，不管能不能解析它都不会返回null
        也就是说它拦截了所有的逻辑视图，让后续的解析器得不到执行，所以InternalResourceViewResolver必须放在最后。记住一点：不能解析就返回null，这样后续解析器才能解析。)-->
        <property name="order" value="10"/>
    </bean>


    <!-- 拦截器 -->
    <!--<mvc:interceptors>-->
    <!--&lt;!&ndash; 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 &ndash;&gt;-->
    <!--<mvc:interceptor>-->
    <!--<mvc:mapping path="/test/number.do" />-->
    <!--&lt;!&ndash;定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 &ndash;&gt;-->
    <!--<bean class="com.host.app.web.interceptor.LoginInterceptor" />-->
    <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->


    <!-- 文件上传配置 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding">
            <value>UTF-8</value>
        </property>
        <property name="maxUploadSize">
            <value>1048576000</value><!-- 总上传文件大小限制为1000M，31*1024*1024 -->
        </property>
        <property name="maxInMemorySize">
            <value>4096</value>
        </property>
    </bean>

</beans>