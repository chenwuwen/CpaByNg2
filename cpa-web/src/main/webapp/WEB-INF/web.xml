<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
    http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" metadata-complete="false">
    <!-- 默认欢迎页 -->
    <!-- Servlet2.5中可直接在此处执行Servlet应用,如<welcome-file>servlet/InitSystemParamServlet</welcome-file> -->
    <!-- 这里使用了SpringMVC提供的<mvc:view-controller>标签,实现了首页隐藏的目的,详见applicationContext.xml -->
    <!--<welcome-file-list>-->
    <!--<welcome-file>login.html</welcome-file>-->
    <!--</welcome-file-list>-->

    <error-page>
        <error-code>405</error-code>
        <location>/405.html</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/404.html</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/WEB-INF/500.jsp</location>
    </error-page>
    <error-page>
        <exception-type>java.lang.Throwable</exception-type>
        <location>/WEB-INF/500.jsp</location>
    </error-page>


    <!--log4j配置开始-->
    <!-- 指定log4j配置文件log4j.properties的位置（如果是在classpath根路径下，可以不配置） -->
    <!--<context-param>-->
    <!--<param-name>log4jConfigLocation</param-name>-->
    <!--<param-value>classpath:log4j.properties</param-value>-->
    <!--</context-param>-->
    <!--&lt;!&ndash; 此处的值默认为webapp.root,当tomcat下有多个应用使用log4j时，应当更改此值，否则会出错，更改后，log4j配置文件的输出路径应为${value的值}/"之后的路径" &ndash;&gt;-->
    <!--<context-param>-->
    <!--<param-name>webAppRootKey</param-name>-->
    <!--<param-value>cpa.root</param-value>-->
    <!--</context-param>-->
    <!--&lt;!&ndash; 设置spring扫描log4j.properties配置的时间间隔，这样的话，修改了log4j.properties的话就可以马上生效 &ndash;&gt;-->
    <!--<context-param>-->
    <!--<param-name>log4jRefreshInterval</param-name>-->
    <!--<param-value>6000</param-value>-->
    <!--</context-param>-->
    <!--&lt;!&ndash; 配置spring中对于log4j的listener,注意该Listener要在spring的listener之前. 这样就可以在log4j.properties里面使用webapp.root来作为web项目的根目录下了 &ndash;&gt;-->
    <!--<listener>-->
    <!--&lt;!&ndash;spring4的配置&ndash;&gt;-->
    <!--<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>-->
    <!--</listener>-->
    <!--log4j配置结束-->

    <!--logback配置开始-->
    <context-param>
        <!--logback配置优先级顺序-->
        <!--logback首先在classpath寻找logback.groovy文件，-->
        <!--如果没找到，继续寻找logback-test.xml文件-->
        <!--如果没找到，继续寻找logback.xml文件-->
        <!--如果仍然没找到，则使用默认配置（打印到控制台）-->
        <!--所以如果配置文件不重命名的话 不需要在web.xml中添加logbackConfigLocation,它自己会去找-->
        <param-name>logbackConfigLocation</param-name>
        <param-value>classpath:logback.xml</param-value>
    </context-param>
    <!--LogBack监听器-->
    <listener>
        <listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>
    </listener>
    <!--logback配置结束-->

    <!-- session超时定义,单位为分钟 -->
    <session-config>
        <session-timeout>600</session-timeout>
    </session-config>
    <!--web.xml中可以定义两种参数：-->
    <!--一个是全局参数(ServletContext)，通过<context-param></context-param>-->
    <!--一个是servlet参数，通过在servlet中声明 <init-param> </init-param>-->
    <!--第一种参数在servlet里面可以通过getServletContext().getInitParameter("context/param")得到-->
    <!--第二种参数只能在servlet的init()方法中通过this.getInitParameter("param1")取得-->

    <!-- spring上下文容器配置 spring为我们提供了实现ServletContextListener接口的上下文初始化监听器：org.springframework.web.context.ContextLoaderListener-->
    <!--　spring为我们提供的IOC容器，需要我们指定容器的配置文件，然后由该监听器初始化并创建该容器。要求你指定配置文件的地址及文件名称，一定要使用：contextConfigLocation作为参数名称-->
    <!--默认读取/WEB-INF/下的applicationContext.xml文件。但是通过context-param指定配置文件路径后，便会去你指定的路径下读取对应的配置文件，并进行初始化-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:applicationContext.xml,classpath:spring-shiro.xml,classpath:spring-redis.xml,classpath:spring-quartz.xml
        </param-value>
    </context-param>
    <!-- 防止发生java.beans.Introspector内存泄露,应将它配置在ContextLoaderListener的前面 -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>
    <!-- spring监听器 需要注意的是 在spring的web中[非SpringBoot项目] 这个监听器是spring启动的入口,也就是说当web容器启动的时候，启动spring-->
    <!--首先，对于一个web应用，其部署在web容器中，web容器提供其一个全局的上下文环境，这个上下文就是ServletContext，其为后面的spring IoC容器提供宿主环境-->
    <!--其次，在web.xml中会提供有contextLoaderListener。在web容器启动时，会触发容器初始化事件，此时contextLoaderListener会监听到这个事件，其contextInitialized方法会被调用，在这个方法中，spring会初始化一个启动上下文，这个上下文被称为根上下文，即WebApplicationContext，这是一个接口类，确切的说，其实际的实现类是XmlWebApplicationContext。这个就是spring的IoC容器，其对应的Bean定义的配置由web.xml中的context-param标签指定。在这个IoC容器初始化完毕后，spring以WebApplicationContext.ROOTWEBAPPLICATIONCONTEXTATTRIBUTE为属性Key，将其存储到ServletContext中，便于获取-->
    <!--再次，contextLoaderListener监听器初始化完毕后，开始初始化web.xml中配置的Servlet，这个servlet可以配置多个，以最常见的DispatcherServlet为例，这个servlet实际上是一个标准的前端控制器，用以转发、匹配、处理每个servlet请求。DispatcherServlet上下文在初始化的时候会建立自己的IoC上下文，用以持有spring mvc相关的bean。在建立DispatcherServlet自己的IoC上下文时，会利用WebApplicationContext.ROOTWEBAPPLICATIONCONTEXTATTRIBUTE先从ServletContext中获取之前的根上下文(即WebApplicationContext)作为自己上下文的parent上下文。有了这个parent上下文之后，再初始化自己持有的上下文。这个DispatcherServlet初始化自己上下文的工作在其initStrategies方法中可以看到，大概的工作就是初始化处理器映射、视图解析等。这个servlet自己持有的上下文默认实现类也是mlWebApplicationContext。初始化完毕后，spring以与servlet的名字相关(此处不是简单的以servlet名为Key，而是通过一些转换，具体可自行查看源码)的属性为属性Key，也将其存到ServletContext中，以便后续使用。这样每个servlet就持有自己的上下文，即拥有自己独立的bean空间，同时各个servlet共享相同的bean，即根上下文(第2步中初始化的上下文)定义的那些bean。-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!-- 不拦截静态文件,该servlet为tomcat,jetty等容器提供 -->
    <!--Tomcat, Jetty, JBoss, and GlassFish  默认 Servlet的名字 &#45;&#45; "default"-->
    <!--Resin 默认 Servlet的名字 &#45;&#45; "resin-file"-->
    <!--WebLogic 默认 Servlet的名字  &#45;&#45; "FileServlet"-->
    <!--WebSphere  默认 Servlet的名字 &#45;&#45; "SimpleFileServlet"-->
    <!--如果你所有的Web应用服务器的默认Servlet名称不是"default"，则需要通过default-servlet-name属性显示指定-->
    <!--<mvc:default-servlet-handler default-servlet-name="所使用的Web服务器默认使用的Servlet名称" />-->
    <!--这个配置要在DispatcherServlet的前面-->
    <!--但是自己测试没用,如果自定义了一个过滤器,切过滤器的范围是(/*),那么即使配置如下还是会把静态资源文件过滤掉,只能在自定义的过滤器中使用endWith(".css")来判断是否需要过滤-->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.jpg</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>
    <!-- SpringMvc配置 -->
    <servlet>
        <servlet-name>springMvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <!--启动web时就加载springMVC的servlet，即启动时就在家springMVC的配置文件-->
        <!--	如果web.xml中配置了<load-on-startup>属性，则在Tomcat初始化时按其值从小到大的顺序加载所有servlet的init方法。
            如果没有配置<load-on-startup>属性，容器初始化时不加载。在请求匹配的url时进行加载，并且只加载最后一个servlet的init方法。其他的servlet不加载。-->
        <load-on-startup>0</load-on-startup>
        <!--可异步执行，项目会比较流畅-->
        <!--配置异步时若报错，因为是3.0的新特性，可将2.5改为3.0-->
        <async-supported>true</async-supported>
    </servlet>
    <servlet-mapping>
        <servlet-name>springMvc</servlet-name>
        <!--之前一直使用*.do来做的，但是觉的*.do很丑，于是就改用“/”来配置，如果你的DispatcherServlet拦截"/"，为了实现REST风格，拦截了所有的请求，那么同时对*.js,*.jpg等静态文件的访问也就被拦截了。解决方法：激活Tomcat的defaultServlet来处理静态文件,如上面所配置的-->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <!--druid访问监控界面 /druid/index.html-->
    <servlet>
        <servlet-name>DruidStatView</servlet-name>
        <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>DruidStatView</servlet-name>
        <url-pattern>/druid/*</url-pattern>
    </servlet-mapping>


    <!--过滤器配置,其先于Servlet初始化,先执行过滤器,符合条件,再doFilter之后的操作,其只在web启动时进行初始化操作-->
    <!--    Filter 流程是线性的， url传来之后，检查之后，可保持原来的流程继续向下执行，被下一个filter, servlet接收等，而servlet 处理之后，不会继续向下传递。filter功能可用来保持流程继续按照原来的方式进行下去，或者主导流程，而servlet的功能主要用来主导流程。
        在filter接口要实现三个方法：init(),destroy(),dofilter();分别是初始化，析构，和过滤，其中大部分时间花费在doFilter()方法上
        特点：可以在响应之前修改Request和Response的头部，只能转发请求，不能直接发出响应。filter可用来进行字符编码的过滤，检测用户是否登陆的过滤，禁止页面缓存等
        1).filter的init方法在容器初始化时加载。第一次加载容器执行顺序随机，以后再次加载顺序以第一次加载顺序为准。
        2).filter的doFilter方法在请求url时执行，如果有多个filter匹配，则按照<filter-mapping>顺序执行(前提是doFilter方法里面最后要调用FilterChain的doFilter方法，这个方法作用是继续执行下个filter,如果没有加，则不执行下面的filter,其执行顺序是根据filter在web.xml的注册顺序决定的)-->

    <!-- 通过CORS技术实现AJAX跨域访问 -->
    <filter>
        <filter-name>corsFilter</filter-name>
        <filter-class>cn.kanyun.cpa.filter.CorsFilter</filter-class>
        <init-param>
            <param-name>allowOrigin</param-name>
            <param-value>http://localhost:4200</param-value>
        </init-param>
        <init-param>
            <param-name>allowMethods</param-name>
            <param-value>GET,POST,PUT,DELETE,OPTIONS</param-value>
        </init-param>
        <init-param>
            <param-name>allowCredentials</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--自定义的请求头字段-->
        <init-param>
            <param-name>allowHeaders</param-name>
            <param-value>Content-Type,Authorization,Accept,Origin,X-Requested-With</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>corsFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--字符编码过滤-->
    <filter>
        <filter-name>Encoding</filter-name>
        <filter-class>
            org.springframework.web.filter.CharacterEncodingFilter
        </filter-class>
        <!--其中encoding用来设置编码格式，forceEncoding用来设置是否理会 request.getCharacterEncoding()方法，设置为true则强制覆盖之前的编码格式-->
        <!--当Servlet容器启动的时候，会读取web.xml中对于过滤器的配置信息， 读取到<init-param>中的子标签<param-name>encoding和forceEncoding所对应的<param-value>的值，再通过调用该类setEncoding(String encoding)和setForceEncoding(boolean forceEncoding) 将值注入到这连个字段中-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf8</param-value>
        </init-param>
        <!--设置foreEncoding为true会覆盖掉request.getCharacterEncoding()中的方法-->
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>Encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->
    <!-- 这里filter-name必须对应applicationContext.xml中定义的<bean id="shiroFilter"/> -->
    <!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->
    <!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->
    <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param>
            <!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 -->
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>



    <!--此过滤器是为了解决hibernate报错：Could not obtain transaction-synchronized Session for current thread-->
    <filter>
        <filter-name>SpringOpenSessionInViewFilter</filter-name>
        <filter-class>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>SpringOpenSessionInViewFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--druid WebStatFilter用于采集web-jdbc关联监控的数据-->
    <filter>
        <filter-name>DruidWebStatFilter</filter-name>
        <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
        <init-param>
            <param-name>exclusions</param-name>
            <param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>DruidWebStatFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!--自定义的检测登录状态的过滤器,此过滤器将返回包含有登录状态的json对象-->
    <filter>
        <filter-name>LoginStatusFilter</filter-name>
        <filter-class>cn.kanyun.cpa.filter.UserLoginStatusFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>LoginStatusFilter</filter-name>
        <url-pattern>/api/userLoginState</url-pattern>
    </filter-mapping>
</web-app>  