<!--maven-assembly-plugin内置了几个可以用的assembly descriptor：-->
<!--bin ： 类似于默认打包，会将bin目录下的文件打到包中-->
<!--jar-with-dependencies ： 会将所有依赖都解压打包到生成物中-->
<!--src ：只将源码目录下的文件打包-->
<!--project ： 将整个project资源打包-->
<!--一般来说，内置的assembly descriptor都不满足需求，这个时候就需要写自己的assembly descriptor的实现了-->

<assembly xmlns="http://maven.apache.org/ASSEMBLY/2.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd">
    <!--这个id必须跟pom.xml中maven-assembly-plugin的id一致同时这个id会跟在打包文件后面-->
    <id>chat-assembly</id>
    <formats>
        <!--打包的文件的格式,目前支持的打包类型：zip tar tar.gz  tar.bz2 jar  dir war,默认情况下，打jar包时，只有在类路径上的文件资源会被打包到jar中，并且文件名是${artifactId}-${version}.jar-->
        <format>tar.gz</format>
    </formats>
    <!--tar.gz压缩包下是否生成和项目名相同的根目录-->
    <includeBaseDirectory>true</includeBaseDirectory>
    <!--指定要包含的文件集，可以定义多个fileSet-->
    <fileSets>
        <fileSet>
            <!--打包时把/resources/config 目录内的文件放在jar包外的/目录下-->
            <directory>${project.build.directory}/classes/config</directory>
            <outputDirectory>/</outputDirectory>
            <fileMode>0755</fileMode>
            <!--在fileSet里可以使用includes 和 excludes来更精确的控制哪些文件要添加，哪些文件要排除-->
            <excludes>
                <exclude>**/*.txt</exclude>
            </excludes>
            <includes>
                <include>**/*.class</include>
            </includes>
        </fileSet>
    </fileSets>
    <files>
        <!--打包时把README.md文件放在jar包外-->
        <file>
            <source>README.md</source>
            <outputDirectory></outputDirectory>
        </file>
        <file>
            <!--打好的jar包名称和放置目录-->
            <source>${project.build.directory}/${project.build.finalName}.jar</source>
            <outputDirectory>/</outputDirectory>
        </file>
    </files>

    <!--如果想把一些依赖库打到包里，可以用 dependencySets 元素，例如最简单的，把当前工程的所有依赖都添加到包里：-->
    <dependencySets>
        <dependencySet>
            <!--是否把本项目添加到依赖文件夹下-->
            <useProjectArtifact>true</useProjectArtifact>
            <outputDirectory>/</outputDirectory>
        </dependencySet>
    </dependencySets>
</assembly>
